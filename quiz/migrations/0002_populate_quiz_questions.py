# Generated by Django 5.2.5 on 2024-05-21 12:00

from django.db import migrations
import random

# Lista pytań na podstawie dostarczonych przykładów.
# Struktura: (prawdziwy_url, [lista_phishingowych_url])
# Zaktualizowana struktura danych
# Struktura: (Kategoria, Prawdziwy URL, [Lista fałszywych URLi])
INITIAL_QUESTIONS_DATA = [
    # Bankowość
    ('Bankowość', 'https://www.pkobp.pl/ekf/login.html', [
        'https://www.pk0bp.pl/ekf/login.html',
        'https://www.pkobp.pI/ekf/login.html',
        'https://www.ркоbp.pl/ekf/login.html',
        'https://www.pkobp-pl.site/ekf/login.html',
    ]),
    ('Bankowość', 'https://www.mbank.pl/logowanie/', [
        'https://www.mḅank.pl/logowanie',
        'https://www.mƅank.pl/logowanie',
        'https://www.mbank.рl/logowanie',
        'https://www.mbank-pl.com/logowanie',
    ]),
    ('Bankowość', 'https://online.ing.pl/login', [
        'https://online.ịng.pl/login',
        'https://online.íng.pl/login',
        'https://online.ing.рl/login',
        'https://online-ing.pl/login',
    ]),
    # Media społecznościowe
    ('Media społecznościowe', 'https://www.facebook.com/login/', [
        'https://www.faceb00k.com/login',
        'https://www.faceḅook.com/login',
        'https://www.faceboọk.com/login',
        'https://www.facebook-login.com/login/',
    ]),
    ('Media społecznościowe', 'https://www.instagram.com/accounts/login/', [
        'https://www.instagṛam.com/accounts/login',
        'https://www.ínstagram.com/accounts/login',
        'https://www.instаgram.com/accounts/login',
        'https://www.instagram-accounts.com/login/',
    ]),
    ('Media społecznościowe', 'https://twitter.com/login', [
        'https://twịtter.com/login',
        'https://twítter.com/login',
        'https://twіtter.com/login',
        'https://twitter-login.com/login',
    ]),
    # E-commerce
    ('E-commerce', 'https://www.allegro.pl/logowanie', [
        'https://www.aIlegro.pl/logowanie',
        'https://www.alIegro.pl/logowanie',
        'https://www.allegrо.pl/logowanie',
        'https://www.allegrolokaInie.pl/logowanie',
    ]),
    ('E-commerce', 'https://www.amazon.com/ap/signin', [
        'https://www.arnazon.com/ap/signin',
        'https://www.amaz0n.com/ap/signin',
        'https://www.amazọn.com/ap/signin',
        'https://www.amazon-account.com/ap/signin',
    ]),
    # Usługi e-mail i inne
    ('Usługi e-mail i inne', 'https://accounts.google.com/signin', [
        'https://accounts.g00gle.com/signin',
        'https://accounts.googIe.com/signin',
        'https://accounts.goọgle.com/signin',
        'https://accounts-google.com/signin/v2/identifier',
    ]),
    ('Usługi e-mail i inne', 'https://login.microsoftonline.com', [
        'https://login.micr0softonline.com',
        'https://login.microsoftonIine.com',
        'https://login.microsoḟtonline.com',
        'https://signin-microsoft.com/common/login',
    ]),
    # Streaming i rozrywka
    ('Streaming i rozrywka', 'https://www.netflix.com/pl/login', [
        'https://www.netfIix.com/pl/login',
        'https://www.netfl1x.com/pl/login',
        'https://www.netfḷix.com/pl/login',
        'https://www.netflix-member.com/pl/login',
    ]),
    ('Streaming i rozrywka', 'https://www.spotify.com/pl/login', [
        'https://www.sp0tify.com/pl/login',
        'https://www.spotífy.com/pl/login',
        'https://www.spotịfy.com/pl/login',
        'https://www.spotify-account.com/pl/login/',
    ]),
]

def populate_data(apps, schema_editor):
    QuizQuestion = apps.get_model('quiz', 'QuizQuestion')

    # 1. ZABEZPIECZENIE: Czyści tabelę przed dodaniem danych
    QuizQuestion.objects.all().delete()
    
    questions_to_create = []
    # 2. ZMIANA: Rozpakowujemy teraz trzy wartości, w tym kategorię
    for category, real_url, phishing_urls in INITIAL_QUESTIONS_DATA:
        if len(phishing_urls) >= 2:
            phishing_pair = random.sample(phishing_urls, 2)
            questions_to_create.append(
                QuizQuestion(
                    category=category,  # <-- 3. ZMIANA: Dodajemy kategorię
                    real_url=real_url,
                    phishing_url_1=phishing_pair[0],
                    phishing_url_2=phishing_pair[1]
                )
            )
    
    if questions_to_create:
        QuizQuestion.objects.bulk_create(questions_to_create)

def unpopulate_data(apps, schema_editor):
    QuizQuestion = apps.get_model('quiz', 'QuizQuestion')
    QuizQuestion.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('quiz', '0001_initial'),
    ]
    operations = [
        migrations.RunPython(populate_data, reverse_code=unpopulate_data),
    ]